version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: marcos_brindis_db
    environment:
      # Lee las variables del archivo .env
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: marcos_brindis_api
    environment:
      # Pasa las variables al contenedor del backend
      PORT: ${API_PORT}
      DB_HOST: postgres 
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      NODE_ENV: production
    ports:
      # Mapea usando la variable
      - "${API_PORT}:${API_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      #args: 
        # Pasa la URL de la API al build
        #VITE_API_URL: "http://backend:${API_PORT}/api" 
    container_name: marcos_brindis_frontend
    ports:
      # Mapea usando la variable
      - "${FRONT_PORT}:3000"
    depends_on:
      - backend
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local